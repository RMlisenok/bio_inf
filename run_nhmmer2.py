import os
import subprocess
from pathlib import Path

# –ü—É—Ç—å –∫ –≥–µ–Ω–æ–º–∞–º –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏-–∑–∞–ø—Ä–æ—Å—É
GENOMES_DIR = Path("./genomes/processed1")
QUERY = Path("/home/lisa/projects/python_projects/genes/query_sequences/ENSG00000225940.fasta")
OUTPUT_DIR = Path("./nhmmer_results2")
OUTPUT_DIR.mkdir(exist_ok=True)

# E-value threshold
E_THRESHOLD = 1e-5

def run_nhmmer(genome_fasta, query_fasta):
    output_tsv = OUTPUT_DIR / (genome_fasta.stem + ".tsv")
    cmd = [
        "nhmmer",
        "--tblout", str(output_tsv),
        str(query_fasta),
        str(genome_fasta)
    ]
    print(f"üöÄ –ó–∞–ø—É—Å–∫ nhmmer –¥–ª—è {genome_fasta.name}")
    subprocess.run(cmd, check=True)
    return output_tsv

def parse_and_filter_tsv(tsv_path, e_threshold=1e-10):
    matches = []
    with open(tsv_path) as f:
        for line in f:
            if line.startswith("#") or not line.strip():
                continue
            fields = line.strip().split()
            try:
                target_name = fields[0]
                alifrom = int(fields[6])
                alito = int(fields[7])
                strand = fields[11]
                evalue = float(fields[12])
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å e-value={evalue} –Ω–∞ {target_name}:{alifrom}-{alito} ({strand})")
            except Exception as ex:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {line.strip()}\n{ex}")
                continue

            if evalue <= e_threshold:
                matches.append((target_name, alifrom, alito, strand))
    return matches



def write_bed_file(matches, bed_path):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ BED —Ñ–∞–π–ª.
    BED –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî 0-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –ø–æ–ª—É–∑–∞–∫—Ä—ã—Ç—ã–µ:
    start = alifrom - 1, end = alito
    """
    with open(bed_path, "w") as f:
        for chrom, start, end, strand in matches:
            bed_start = start - 1  # BED —Ñ–æ—Ä–º–∞—Ç 0-based
            bed_end = end          # BED end - –Ω–µ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
            # –§–æ—Ä–º–∞—Ç: chrom, start, end, name, score, strand
            # name –∏ score –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ
            f.write(f"{chrom}\t{bed_start}\t{bed_end}\t.\t0\t{strand}\n")

def extract_sequences(genome_fasta, bed_path, fasta_out):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é bedtools getfasta.
    """
    cmd = [
        "bedtools", "getfasta",
        "-fi", str(genome_fasta),
        "-bed", str(bed_path),
        "-s",  # —É—á–∏—Ç—ã–≤–∞–µ–º strand
        "-name",  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏–∑ bed (—Ö—Ä–æ–º–æ—Å–æ–º—É)
        "-fo", str(fasta_out)
    ]
    print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏–∑ {genome_fasta.name}")
    subprocess.run(cmd, check=True)

def main():
    all_results = []
    for genome_fasta in GENOMES_DIR.glob("*.fa"):
        try:
            tsv_path = run_nhmmer(genome_fasta, QUERY)
            matches = parse_and_filter_tsv(tsv_path, e_threshold=E_THRESHOLD)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ {genome_fasta.name}")

            if matches:
                bed_path = OUTPUT_DIR / f"{genome_fasta.stem}.bed"
                fasta_out = OUTPUT_DIR / f"{genome_fasta.stem}_extracted.fa"

                write_bed_file(matches, bed_path)
                extract_sequences(genome_fasta, bed_path, fasta_out)

                print(f"üíæ BED —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {bed_path}")
                print(f"üíæ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è MAFFT —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {fasta_out}")

            all_results.extend(matches)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º {genome_fasta.name}: {e}")

    if not all_results:
        print("‚ö†Ô∏è  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É e-value.")
    else:
        print(f"\nüéØ –í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(all_results)}")

if __name__ == "__main__":
    main()
